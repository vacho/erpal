<?php
/**
 *  @file filejs/filejs.module
 *  @author Thiemo Mï¿½ller
 *  @version 1.0
 *  
 *  Define all public functions, hooks and globally available (i.e. reused) private functions
 */

function filejs_menu() {
  
  $items['filejs/upload'] = array(
    'page callback'         => 'filejs_render_upload',
    'access callback'       => TRUE,
    'type'                  => MENU_CALLBACK,
  );
  
  return $items;
}

function _filejs_output( $result ) {
  $data = array(
    'contents'  => array(),
  );
  
  if( is_string($result) ) {
    $data['error_message']  = $result;
  }
  else {
    $data['contents']       = $result;
  }
  
  $data['error']  = isset($data['error_message']);
  
  drupal_json_output( $data );
  die();
}

function filejs_render_upload() {
  $count	= isset($_POST['file-count']) ? $_POST['file-count'] : 0;
	if( !$count ) {
    _filejs_output( 'Missing files!' );
	}
  
  $read_as  = isset($_GET['read_as']) ? $_GET['read_as'] : NULL;
  $result   = array();
  
  for( $i=0; $i<$count; $i++ ) {
		$file		= $_FILES[ 'file-'.$i ];
		if( $file['error'] ) {
			if( $read_as )
				$result[]	= '';
			else
				$result[]	= array( 'error'=>$file['error'] );
		}
		else {
			if( $read_as ) {
				$contents = file_get_contents( $file['tmp_name'] );
				if( $read_as=='array_buffer' ) {
					$contents	= mb_convert_encoding( $contents, 'UTF-16', mb_detect_encoding( $contents ) );
					$buffer   = array();
					for( $n=0; $n<strlen($contents); $n++ )
						$buffer[]	= $contents[$n];
          
          $result[] = $buffer;
				}
				elseif( $read_as=='data_url' ) {
					$result[]	= 'data:'.$file['type'].';base64,'.base64_encode( $contents );
				}
				else {
					$result[]	= $contents;
				}
				continue;
			}
			
			$result[]	= array( 'url'=>'', 'index'=>$i, 'error'=>FALSE, 'type'=>$file['type'], 'name'=>$file['name'] );
		}
	}
  
  drupal_alter( 'filejs_files', $result );
  
  _filejs_output( $result );
}

/**
 *	Implements hook_init
 */
function filejs_init() {
  
  //libraries_load( 'filejs' );
  
  drupal_add_library( 'system', 'ui.draggable' );
  
  $libraries  = array( 'createclass', 'web-filesystem', 'inter-tab-js', 'jquery.transit', 'boxjs', 'modernizr', 'filejs' );
  $paths      = array();
  $missing = array();
  for( $i=0; $i<count($libraries); $i++ ) {
    $paths[$i]  = libraries_get_path( $libraries[$i] ) . '/' . ($libraries[$i]=='modernizr'?$libraries[$i].'.min':$libraries[$i]) . '.js';
    if( !file_exists( $paths[$i] ) )
      $missing[] = array('name' => $libraries[$i], 'path' => $paths[$i]);
  }
  
  if( !count($missing) ) {
    for( $i=0; $i<count($libraries); $i++ )
      drupal_add_js( $paths[$i], array( 'weight'=>$i*3 ) );
    
    drupal_add_css( libraries_get_path( 'boxjs' ) . '/css/boxjs.css' );
    drupal_add_css( libraries_get_path( 'filejs' ) . '/css/filejs.css' );
    
    $path = drupal_get_path( 'module', 'filejs' );
    drupal_add_css( $path . '/css/filejs-module.css' );
    drupal_add_js( $path . '/js/filejs.js', array( 'weight'=>$i*3 ) );
  }
  else {
    foreach ($missing as $missing_arr) {
      drupal_set_message( t( 'Please install the following library: @name. See README for details on how to install filejs.', array( '@name'=>$missing_arr['name'] ) ), 'status', FALSE );
    }
  }
    
  
}

/**
 *  Implements hook_libraries_info
 *  
 *  Disabled until on DO whitelist
 */
function filejs_libraries_info() {
  
  $libraries['filejs'] = array(
    'name'          => 'FileJS',
    'vendor url'    => 'http://www.morpol.de/',
    'download url'  => 'https://github.com/MORPOL/filejs',
    'files'         => array(
      'js'            => array(
        'filejs.js',
      ),
    ),
    'dependencies'	=> array(
      'createclass (=>0.2)',
      'boxjs (=>0.1)',
    ),
    'version callback'  => 'libraries_get_version',
    'version arguments' => array(
      'file'    => 'package.json',
      'pattern' => '@version"\s+:\s+"([0-9a-zA-Z\.-]+)",@'
    ),
  );
  
  return $libraries;
  
}

/**
 *	Implements hook_field_widget_WIDGET_TYPE_form_alter
 */
function filejs_field_widget_entityreference_autocomplete_form_alter(&$element, &$form_state, $context) {
	/*dpm( $element );
	dpm( $context );*/
	
	$settings	= &$context['field']['settings'];
	if( $settings['target_type']=='node' ) {
		if( $settings['handler']=='base' ) {
			$types	= $settings['handler_settings']['target_bundles'];
			foreach( $types as $type )
				$element['target_id']['#attributes']['class'][]	= 'node-type-'.str_replace( '_', '-', $type );
		}
		else {
			$element['target_id']['#attributes']['class'][]	= 'unknown-node-type';
		}
	}
}

?>