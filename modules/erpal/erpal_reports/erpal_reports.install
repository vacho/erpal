<?php
/**
 * @file
 * Installation file of the erpal_reports module.
 */

/**
 * Update 7001 description.
 */
//function erpal_reports_update_7001() {
//}


/**
 * Implements hook_uninstall().
 */
function erpal_reports_uninstall() {
  // Bypass entity_load() as we cannot use it here.
  $types = db_select('erpal_reports_type', 'et')
    ->fields('et')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($types as $name => $type) {
    field_attach_delete_bundle('erpal_reports', $name);
  }
}

/**
 * Implements hook_schema().
 */
function erpal_reports_schema() {
  $schema['erpal_reports'] = array(
    'description' => 'Stores Erpal Reports entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique erpal_reports item ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The bundle type of the erpal_reports.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the associated user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The creation Unix timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The updated Unix timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'dirty' => array (
        'description' => 'If this is set, the dataset should be recalculated',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'title' => array(
        'description' => 'The title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'The serialized data of the report',
        'merge' => TRUE,
      ),
      'dashboard' => array(
        'description' => 'A boolean indicating whether the entity should be shown on the dashboard or not.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'type' => array('type'),
      'dirty' => array('dirty'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => 'erpal_reports_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['erpal_reports_type'] = array(
    'description' => 'Stores information about all defined erpal_reports types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique erpal_reports type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable type of this erpal_reports type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this erpal_reports type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this erpal_reports type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this {type} type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  // Add erpal_reports entity revision support.
  $schema['erpal_reports']['fields']['rid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'The ID of the entity\'s default revision.',
  );

  $schema['erpal_reports_revision'] = $schema['erpal_reports'];
  $schema['erpal_reports_revision']['fields']['rid'] = array(
    'type' => 'serial',
    'not null' => TRUE,
    'description' => 'Primary Key: Unique revision ID.',
  );
  $schema['erpal_reports_revision']['fields']['id'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'The ID of the attached entity.',
  );
  $schema['erpal_reports_revision']['primary key'] = array('rid');

  //add report details table
  $schema['erpal_report_details'] = array(
    'description' => 'Stores Erpal Reports detail data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique item ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'report_id' => array(
        'description' => 'The id of the report where this detail belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'x_value' => array(
        'description' => 'The value of the x-axis',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'y_value' => array(
        'description' => 'The value of the y-axis', //this are all collected values serialized. 
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'z_value' => array(
        'description' => 'The value of the z-axis',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'rid' => array('report_id'),
    ),
    'primary key' => array('id'),
  );
  
  return $schema;
}

/**
* Add a detail table for reports
*/
function erpal_reports_update_7001(&$sandbox) {
  drupal_get_schema('erpal_report_details', TRUE); //Rebuild Schema
  $schema = erpal_reports_schema();
  $table = $schema['erpal_report_details']; 
  db_create_table('erpal_report_details', $table);
}

/**
* Add a dashboard flag for report entites and
* Delete all previous report entities, they will be new created.
*/
function erpal_reports_update_7002(&$sandbox) {
  drupal_get_schema('erpal_reports', TRUE); //Rebuild Schema  
  $schema = erpal_reports_schema();
  $table = 'erpal_reports';
  $field = 'dashboard';
  
  $spec = $schema['erpal_reports']['fields']['dashboard'];
  
  db_add_field('erpal_reports_revision', $field, $spec);  
  db_add_field($table, $field, $spec);    
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'erpal_reports')    
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['erpal_reports'])) {
    $news_items_ids = array_keys($result['erpal_reports']);
    entity_delete_multiple('erpal_reports', $news_items_ids);
  }
}

/**
* Implements hook_install
*/ 
function erpal_reports_install() {
  _erpal_reports_elyisa_cron_defaults();
}

/**
* Set elysia cron defaults
*/
function erpal_reports_update_7003() {
  _erpal_reports_elyisa_cron_defaults();
}

/**
* Set the eylsia cron default rule for this module
*/
function _erpal_reports_elyisa_cron_defaults() {
  $values = array('rule' => '0 */6 * * *');
  elysia_cron_set('erpal_reports_cron', false, $values);
}

